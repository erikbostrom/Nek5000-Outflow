      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      COMMON /MY_VAR/ VU1,VU2,VU3
     $     ,DU1,DU2,DU3,CSPEED

      REAL  VU1   (lx1,ly1,lz1,lelt,3)
     $     ,VU2   (lx1,ly1,lz1,lelt,3)
     $     ,VU3   (lx1,ly1,lz1,lelt,3)
     $     ,DU1   (lx1,ly1,lz1,lelt,3)
     $     ,DU2   (lx1,ly1,lz1,lelt,3)
     $     ,DU3   (lx1,ly1,lz1,lelt,3)
     $     ,DUMMY (lx1*ly1*lz1*lelt,2)
     $     ,ERRX,ERRY

      parameter(lt=lx1*ly1*lz1*lelv)

      real x0(3)
      save x0
      data x0 /3*0/

      nt = lt

C     Initialize the old x-derivatives as zeros
      IF(ISTEP.EQ.0) THEN
         CALL RZERO3(VU2(1,1,1,1,1),VU2(1,1,1,1,2),VU2(1,1,1,1,3),NT)
         CALL RZERO3(VU3(1,1,1,1,1),VU3(1,1,1,1,2),VU3(1,1,1,1,3),NT)
         CALL RZERO3(DU2(1,1,1,1,1),DU2(1,1,1,1,2),DU2(1,1,1,1,3),NT)
         CALL RZERO3(DU3(1,1,1,1,1),DU3(1,1,1,1,2),DU3(1,1,1,1,3),NT)
      END IF

C     Save down old values
C     This part must be changed. This is costy.
      CALL OPCOPY(VU3(1,1,1,1,1),VU3(1,1,1,1,2),VU3(1,1,1,1,3)
     $     ,      VU2(1,1,1,1,1),VU2(1,1,1,1,2),VU2(1,1,1,1,3))
      CALL OPCOPY(VU2(1,1,1,1,1),VU2(1,1,1,1,2),VU2(1,1,1,1,3)
     $     ,      VU1(1,1,1,1,1),VU1(1,1,1,1,2),VU1(1,1,1,1,3))
      CALL OPCOPY(VU1(1,1,1,1,1),VU1(1,1,1,1,2),VU1(1,1,1,1,3)
     $     ,      VX,            VY,            VZ)
      CALL OPCOPY(DU3(1,1,1,1,1),DU3(1,1,1,1,2),DU3(1,1,1,1,3)
     $     ,      DU2(1,1,1,1,1),DU2(1,1,1,1,2),DU2(1,1,1,1,3))
      CALL OPCOPY(DU2(1,1,1,1,1),DU2(1,1,1,1,2),DU2(1,1,1,1,3)
     $     ,      DU1(1,1,1,1,1),DU1(1,1,1,1,2),DU1(1,1,1,1,3))

C     Vorticity field is saved down in the temperature field
      if (mod(istep,iostep).eq.0) then
         call comp_vort3(DU1,DUMMY(1,1),DUMMY(1,2),vx,vy,vz)
         call copy(t(1,1,1,1,1),DU1,LT)
      end if

C     Compute x-derivatives
      CALL GRADM1  (DU1(1,1,1,1,1),DUMMY(1,1),DUMMY(1,2),VX)
      CALL OPDSSUM (DU1(1,1,1,1,1),DUMMY(1,1),DUMMY(1,2))
      CALL OPCOLV  (DU1(1,1,1,1,1),DUMMY(1,1),DUMMY(1,2),VMULT)
      
      CALL GRADM1  (DU1(1,1,1,1,2),DUMMY(1,1),DUMMY(1,2),VY)
      CALL OPDSSUM (DU1(1,1,1,1,2),DUMMY(1,1),DUMMY(1,2))
      CALL OPCOLV  (DU1(1,1,1,1,2),DUMMY(1,1),DUMMY(1,2),VMULT)

      IF (IF3D) THEN
         CALL GRADM1  (DU1(1,1,1,1,3),DUMMY(1,1),DUMMY(1,2),VZ)
         CALL OPDSSUM (DU1(1,1,1,1,3),DUMMY(1,1),DUMMY(1,2))
         CALL OPCOLV  (DU1(1,1,1,1,3),DUMMY(1,1),DUMMY(1,2),VMULT)
      END IF

      if (istep.eq.0) call set_obj  ! define objects for surface integrals

      call estimate_strouhal

      scale = 2.  ! Cd = F/(.5 rho U^2 ) = 2*F
      if (mod(istep,10).eq.0) call torque_calc(scale,x0,.true.,.false.)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      COMMON /MY_VAR/ VU1 (lx1,ly1,lz1,lelt,3) 
     $     ,          VU2 (lx1,ly1,lz1,lelt,3) 
     $     ,          VU3 (lx1,ly1,lz1,lelt,3)
     $     ,          DU1 (lx1,ly1,lz1,lelt,3) 
     $     ,          DU2 (lx1,ly1,lz1,lelt,3)
     $     ,          DU3 (lx1,ly1,lz1,lelt,3)
     $     ,          CSPEED

      REAL EXT3X,EXT3Y,EXT3Z
     $     ,AB0,AB1,AB2,BD0,BD1,BD2,BD3
      LOGICAL DEBUG
      DEBUG=.false.

      IEL = GLLEL(IEG)
      CSPEED = 1.0

C     Backward differentiating coefficients
      BD0 = BD(1)
      BD1 = BD(2)
      BD2 = BD(3)
      BD3 = BD(4)

C     Extrapolation coefficients
      AB0 = AB(1)
      AB1 = AB(2)
      AB2 = AB(3)

      IF (CBU.EQ.'v  ' .AND. X.LT.1.0) THEN ! Inflow boundary (left)
         UX = 1.0
         UY = 0.0
         IF (IF3D) UZ = 0.0

      ELSE IF (CBU.EQ.'v  ' .AND. X.GT.1.0) THEN ! Outflow boundary (right)
         
         EXT3X=AB0*DU1(IX,IY,IZ,IEL,1)
     $        +AB1*DU2(IX,IY,IZ,IEL,1)
     $        +AB2*DU3(IX,IY,IZ,IEL,1)
         EXT3Y=AB0*DU1(IX,IY,IZ,IEL,2)
     $        +AB1*DU2(IX,IY,IZ,IEL,2)
     $        +AB2*DU3(IX,IY,IZ,IEL,2)
         IF(IF3D) THEN
            EXT3Z=AB0*DU1(IX,IY,IZ,IEL,3)
     $           +AB1*DU2(IX,IY,IZ,IEL,3)
     $           +AB2*DU3(IX,IY,IZ,IEL,3)
         ENDIF
         
         UX = (BD1*VU1(ix,iy,iz,iel,1)
     $        +BD2*VU2(ix,iy,iz,iel,1)
     $        +BD3*VU3(ix,iy,iz,iel,1)
     $        -DT*CSPEED*EXT3X)/BD0
         UY=  (BD1*VU1(ix,iy,iz,iel,2)
     $        +BD2*VU2(ix,iy,iz,iel,2)
     $        +BD3*VU3(ix,iy,iz,iel,2)
     $        -DT*CSPEED*EXT3Y)/BD0
         IF (IF3D) then
            UZ = (BD1*VU1(ix,iy,iz,iel,3)
     $           +BD2*VU2(ix,iy,iz,iel,3)
     $           +BD3*VU3(ix,iy,iz,iel,3)
     $           -DT*CSPEED*EXT3Z)/BD0
         ENDIF
      END IF
      temp=0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0 + 0.1*tanh(y/(0.2*sqrt(2.)))
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

c     param(66) = 4.   ! These give the std nek binary i/o and are 
c     param(67) = 4.   ! good default values

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine estimate_strouhal

      include 'SIZE'
      include 'TOTAL'

      real tlast,vlast,tcurr,vcurr,t0,t1
      save tlast,vlast,tcurr,vcurr,t0,t1
      data tlast,vlast,tcurr,vcurr,t0,t1 / 6*0 /

      integer e,eg,eg0,e0

      eg0 = 622          ! Identify element/processor in wake
      mid = gllnid(eg0)
      e0  = gllel (eg0)

      st  = 0

      if (nid.eq.mid) then

         tlast = tcurr
         vlast = vcurr

         tcurr = time
         vcurr = vy (1,ny1,1,e0)

         xcurr = xm1(1,ny1,1,e0)
         ycurr = ym1(1,ny1,1,e0)

         write(6,2) istep,time,vcurr,xcurr,ycurr
    2    format(i9,1p4e13.5,' vcurr')

         if (vlast.gt.0.and.vcurr.le.0) then ! zero crossing w/ negative slope
            t0  = t1
            t1  = tlast + (tcurr-tlast)*(vlast-0)/(vlast-vcurr)
            per = t1-t0
            if (per.gt.0) st = 1./per
         endif
      endif

      st = glmax(st,1)

      n  = nx1*ny1*nz1*nelv
      ux = glamax(vx,n)
      uy = glamax(vy,n)

      if (nid.eq.0.and.st.gt.0) write(6,1) istep,time,st,ux,uy
    1 format(i5,1p4e12.4,' Strouhal')

      return
      end
c-----------------------------------------------------------------------
      subroutine set_obj  ! define objects for surface integrals
c
      include 'SIZE'
      include 'TOTAL'

      integer e,f,eg

      nobj = 1
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F'
         hcode( 2,ii) = 'F'
         hcode( 3,ii) = 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj

      if (maxobj.lt.nobj) call exitti('increase maxobj in SIZE$',nobj)

      nxyz  = nx1*ny1*nz1
      nface = 2*ndim

      do e=1,nelv
      do f=1,nface
         if (cbc(f,e,1).eq.'W  ') then
            iobj  = 1
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               eg  = lglel(e)
               object(iobj,mem,1) = eg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,eg,e,nid,' OBJ'
c   1          format(6i9,a4)

            endif
         endif
      enddo
      enddo

c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end
c-----------------------------------------------------------------------
c
c automatically added by makenek
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)
      return
      end
